# Run clang tidy general analysis, excluding variable naming checks.
---
Checks: >
  clang-diagnostic-*,
  clang-analyzer-*,
  boost-use-to-string,
  bugprone-*,
  cert-dcl58-cpp,
  cert-env33-c,
  cert-err34-c,
  cert-err52-cpp,
  cert-err58-cpp,
  cert-mem57-cpp,
  cert-oop57-cpp,
  cert-oop58-cpp,
  cppcoreguildelines-*,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-pro-bounds-pointer-arithmatic,
  -cppcoreguidelines-pro-type-union-access,
  google-*,
  -google-runtime-references,
  llvm-include-order,
  llvm-namespace-comment,
  misc-*,
  -misc-no-recursion,
  -misc-non-private-member-variables-in-classes,
  -misc-unused-parameters,
  modernize-*,
  -modernize-use-trailing-return-type,
  performance-*,
  readability-*,
  -readability-implicit-bool-conversion,
  -readability-uppercase-literal-suffix,
  hicpp-signed-bitwise
WarningsAsErrors: ''
HeaderFilterRegex: '.*'
AnalyzeTemporaryDtors: false
FormatStyle:     none
User: csiro
CheckOptions:
  - key: bugprone-argument-comment.StrictMode
    value: '1'
  - key: bugprone-misplaced-widening-cast.CheckImplicitCasts
    value: '1'
  - key: performance-move-constructor-init.IncludeStyle
    value: 'llvm'
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: '1'
  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
    value: '1'
  - key: google-runtime-int.TypeSuffix
    value: '_t'
  - key: modernize-use-default-member-init.UseAssignment
    value: '1'
  # ---------------------------------------------------------------------------
  # Classes and structs
  # Class names
  - key:  readability-identifier-naming.ClassCase
    value: CamelCase
  # Structs
  - key:  readability-identifier-naming.StructCase
    value: CamelCase
  # static const class members
  - key:  readability-identifier-naming.ClassConstantCase
    value: CamelCase
  - key:  readability-identifier-naming.ClassConstantPrefix
    value: 'k'
  # static class members (non-const)
  - key:  readability-identifier-naming.ClassMemberCase
    value: lower_case
  # Class members which are const, but not static - omitted to control by access scope (public, private, etc)
  # - key:  readability-identifier-naming.ConstantMemberCase
  #   value: lower_case
  # Class member functions - any access modifier (public, private, etc)
  - key:  readability-identifier-naming.ClassMethodCase
    value: camelBack
  # Class member variable catchall
  - key:  readability-identifier-naming.MemberCase
    value: lower_case
  # Private class member variables
  - key:  readability-identifier-naming.PrivateMemberCase
    value: lower_case
  - key:  readability-identifier-naming.PrivateMemberSuffix
    value: '_'
  # Protected member variables
  - key:  readability-identifier-naming.ProtectedMemberCase
    value: lower_case
  - key:  readability-identifier-naming.ProtectedMemberSuffix
    value: '_'

  # ---------------------------------------------------------------------------
  # Enum declaration name case
  - key:  readability-identifier-naming.EnumCase
    value: CamelCase
  # Enum value declarations (the stuff inside the enum)
  - key:  readability-identifier-naming.EnumConstantCase
    value: CamelCase
  - key:  readability-identifier-naming.EnumConstantPrefix
    value: 'k'

  # ---------------------------------------------------------------------------
  # Templates
  - key:  readability-identifier-naming.TemplateParameterCase
    value: CamelCase
  # - key:  readability-identifier-naming.TemplateTemplateParameterCase
  #   value: CamelCase
  # - key:  readability-identifier-naming.TypeTemplateParameterCase
  #   value: CamelCase
  # - key:  readability-identifier-naming.ValueTemplateParameterCase
  #   value: CamelCase


  # ---------------------------------------------------------------------------
  # General and global
  # constexpr variable assignments
  - key:  readability-identifier-naming.ConstexprVariableCase
    value: CamelCase
  - key:  readability-identifier-naming.ConstexprVariablePrefix
    value: 'k'
  # Namespaces
  - key:  readability-identifier-naming.NamespaceCase
    value: lower_case
  # General function parameter names
  - key:  readability-identifier-naming.ParameterCase
    value: lower_case
  # Union names
  - key:  readability-identifier-naming.UnionCase
    value: CamelCase
  # General variable declarations
  - key:  readability-identifier-naming.VariableCase
    value: lower_case
  # Typedef names
  - key:  readability-identifier-naming.TypedefCase
    value: CamelCase
  # Names for type aliases: using Name = OtherThing;
  # Includes aliases declared in classes.
  - key:  readability-identifier-naming.TypeAliasCase
    value: CamelCase
  # Free function case
  - key:  readability-identifier-naming.FunctionCase
    value: camelBack
  # Global/free constant variable case. Includes anynomous namespaces.
  - key:  readability-identifier-naming.GlobalConstantCase
    value: CamelCase
  - key:  readability-identifier-naming.GlobalConstantPrefix
    value: 'k'
  # Variables in the global scope.
  - key:  readability-identifier-naming.GlobalVariableCase
    value: lower_case
  - key:  readability-identifier-naming.GlobalVariablePrefix
    value: 'g_'
  # Constants declared within local function scopes. Same as normal variables.
  - key:  readability-identifier-naming.LocalConstantCase
    value: lower_case
  - key:  readability-identifier-naming.LocalConstantPrefix
    value: ''
  # Local variable
  - key:  readability-identifier-naming.LocalVariableCase
    value: lower_case
  # Magic number ignore list
  - key: readability-magic-numbers.IgnoredIntegerValues
    value: 0;1;2;3;4;5;6;7;8;9;10;100;1000
  - key: readability-magic-numbers.IgnorePowersOf2IntegerValues
    value: true
  - key: readability-magic-numbers.IgnoredFloatingPointValues
    value: 0.25;0.5;0.75;1.0;2.0;3.0;10.0;100.0;-1.0;-2.0;-3.0;